#include "menu.h"

#include <sstream>
#include <vector>

const float Menu::m_arFont[][8][2] =
{	
	{
		{0.0, 0.0}, {1.0, 0.0}, {1.0, 1.5}, {0.0, 1.5}, {0.0, 0.0}, {1.0, 1.5}, {-1.0, -1.0}
	}, 
	{
		{0.5, 0.0}, {0.5, 1.5}, {0.375, 1.25}, {-1.0, -1.0}
	}, 
	{
		{0.0, 1.5}, {1.0, 1.5}, {1.0, 0.875}, {0.0, 0.625}, {0.0, 0.0}, {1.0, 0.0}, {-1.0, -1.0}
	}, 
	{
		{0.0, 1.5}, {1.0, 1.5}, {1.0, 0.0}, {0.0, 0.0}, {-1.0, 0.0}, {0.0, 0.75}, {1.0, 0.75}, {-1.0, -1.0}
	}, 
	{
		{0.0, 1.5}, {0.0, 0.75}, {1.0, 0.75}, {-1.0, 0.0}, {1.0, 1.5}, {1.0, 0.0}, {-1.0, -1.0}
	}, 
	{
		{0.0, 0.0}, {1.0, 0.0}, {1.0, 0.75}, {0.0, 0.875}, {0.0, 1.5}, {1.0, 1.5}, {-1.0, -1.0}
	}, 
	{
		{0.0, 1.5}, {0.0, 0.0}, {1.0, 0.0}, {1.0, 0.625}, {0.0, 0.875}, {-1.0, -1.0}
	}, 
	{
		{0.0, 1.5}, {1.0, 1.5}, {1.0, 0.75}, {0.5, 0.0}, {-1.0, -1.0}
	}, 
	{
		{0.0, 0.0}, {1.0, 0.0}, {1.0, 1.5}, {0.0, 1.5}, {0.0, 0.0}, {-1.0, 0.0}, {0.0, 0.75}, {1.0, 0.75}
	}, 
	{
		{1.0, 0.0}, {1.0, 1.5}, {0.0, 1.5}, {0.0, 0.875}, {1.0, 0.625}, {-1.0, -1.0}
	}, 
	{
		{-1.0, -1.0}
	}, 
	{
		{0.375, 0.0}, {0.5, 0.0}, {-1.0, -1.0}
	}, 
	{
		{0.25, 0.0}, {0.5, 0.25}, {-1.0, -1.0}
	}, 
	{
		{0.25, 0.75}, {0.75, 0.75}, {-1.0, -1.0}
	}, 
	{
		{0.125, 0.75}, {0.875, 0.75}, {-1.0, 0.0}, {0.5, 1.125}, {0.5, 0.375}, {-1.0, -1.0}
	}, 
	{
		{0.5, 0.0}, {0.375, 0.25}, {0.625, 0.25}, {0.5, 0.0}, {-1.0, 0.0}, {0.5, 0.5}, {0.5, 1.5}, {-1.0, -1.0}
	}, 
	{
		{0.0, 0.5}, {1.0, 0.5}, {0.75, 0.25}, {0.75, 1.25}, {1.0, 1.0}, {0.0, 1.0}, {0.25, 1.25}, {0.25, 0.25}
	}, 
	{
		{0.25, 0.75}, {0.5, 1.5}, {0.75, 0.75}, {-1.0, -1.0}
	}, 
	{
		{0.125, 0.5}, {0.875, 0.5}, {-1.0, 0.0}, {0.125, 1.0}, {0.875, 1.0}, {-1.0, -1.0}
	}, 
	{
		{0.0, 0.0}, {0.5, 1.5}, {1.0, 0.0}, {0.0, 1.0}, {1.0, 1.0}, {0.0, 0.0}, {-1.0, -1.0}
	}, 
	{
		{0.0, 0.0}, {1.0, 0.0}, {-1.0, -1.0}
	}, 
	{
		{0.0, 0.0}, {1.0, 1.5}, {-1.0, -1.0}
	}, 
	{
		{0.0, 1.5}, {1.0, 0.0}, {-1.0, -1.0}
	}, 
	{
		{1.0, 0.5}, {0.5, 0.0}, {0.0, 0.5}, {0.0, 1.0}, {0.5, 1.5}, {1.0, 1.0}, {0.5, 0.5}, {0.375, 0.75}
	}, 
	{
		{0.75, 0.25}, {0.25, 0.75}, {0.75, 1.25}, {-1.0, 0.0}, {0.5, 1.5}, {0.5, 0.0}, {-1.0, -1.0}
	}, 
	{
		{1.0, 0.0}, {0.5, 1.5}, {1.0, 1.0}, {0.0, 0.5}, {0.5, 0.0}, {1.0, 0.5}, {-1.0, -1.0}
	}, 
	{
		{0.75, 0.0}, {0.25, 0.0}, {0.25, 1.5}, {0.75, 1.5}, {-1.0, -1.0}
	}, 
	{
		{0.25, 0.0}, {0.75, 0.0}, {0.75, 1.5}, {0.25, 1.5}, {-1.0, -1.0}
	}, 
	{
		{0.75, 0.0}, {0.25, 0.5}, {0.25, 1.0}, {0.75, 1.5}, {-1.0, -1.0}
	}, 
	{
		{0.25, 0.0}, {0.75, 0.5}, {0.75, 1.0}, {0.25, 1.5}, {-1.0, -1.0}
	}, 
	{
		{0.75, 0.0}, {0.5, 0.25}, {0.5, 1.25}, {0.75, 1.5}, {-1.0, 0.0}, {0.25, 0.75}, {0.5, 0.75}, {-1.0, -1.0}
	}, 
	{
		{0.5, 0.0}, {0.75, 0.25}, {0.75, 1.25}, {0.5, 1.5}, {-1.0, 0.0}, {0.75, 0.75}, {1.0, 0.75}, {-1.0, -1.0}
	}, 
	{
		{0.0, 0.0}, {1.0, 1.5}, {-1.0, 0.0}, {0.25, 1.25}, {0.25, 1.0}, {-1.0, 0.0}, {0.75, 0.5}, {0.75, 0.25}
	}, 
	{
		{0.75, 0.0}, {0.25, 0.75}, {0.75, 1.5}, {-1.0, -1.0}
	}, 
	{
		{0.25, 0.0}, {0.75, 0.75}, {0.25, 1.5}, {-1.0, -1.0}
	}, 
	{
		{0.5, 0.0}, {0.5, 0.625}, {-1.0, 0.0}, {0.5, 0.75}, {0.5, 1.5}, {-1.0, -1.0}
	}, 
	{
		{0.5, 1.125}, {0.5, 0.875}, {-1.0, 0.0}, {0.5, 0.625}, {0.5, 0.375}, {-1.0, -1.0}
	}, 
	{
		{0.5, 1.125}, {0.5, 0.875}, {-1.0, 0.0}, {0.5, 0.625}, {0.125, 0.25}, {-1.0, -1.0}
	}, 
	{
		{0.25, 1.25}, {0.25, 0.75}, {-1.0, 0.0}, {0.75, 1.25}, {0.75, 0.75}, {-1.0, -1.0}
	}, 
	{
		{0.25, 0.75}, {0.75, 1.25}, {-1.0, -1.0}
	}, 
	{
		{0.25, 1.25}, {0.75, 0.75}, {-1.0, -1.0}
	}, 
	{
		{0.0, 0.5}, {0.25, 1.0}, {0.75, 0.5}, {1.0, 1.0}, {-1.0, -1.0}
	}, 
	{
		{0.0, 1.0}, {0.5, 1.5}, {1.0, 1.0}, {0.5, 0.5}, {-1.0, 0.0}, {0.5, 0.125}, {0.5, 0.0}, {-1.0, -1.0}
	}, 
	{
		{0.0, 0.0}, {0.0, 1.0}, {0.5, 1.5}, {1.0, 1.0}, {1.0, 0.0}, {-1.0, 0.0}, {0.0, 0.5}, {1.0, 0.5}
	}, 
	{
		{0.0, 0.0}, {0.0, 1.5}, {0.5, 1.5}, {1.0, 1.25}, {0.5, 0.75}, {1.0, 0.25}, {0.5, 0.0}, {0.0, 0.0}
	}, 
	{
		{1.0, 0.0}, {0.0, 0.0}, {0.0, 1.5}, {1.0, 1.5}, {-1.0, -1.0}
	}, 
	{
		{0.0, 0.0}, {0.0, 1.5}, {0.5, 1.5}, {1.0, 1.0}, {1.0, 0.5}, {0.5, 0.0}, {0.0, 0.0}, {-1.0, -1.0}
	}, 
	{
		{1.0, 0.0}, {0.0, 0.0}, {0.0, 1.5}, {1.0, 1.5}, {-1.0, 0.0}, {0.0, 0.75}, {0.75, 0.75}, {-1.0, -1.0}
	}, 
	{
		{0.0, 0.0}, {0.0, 1.5}, {1.0, 1.5}, {-1.0, 0.0}, {0.0, 0.75}, {0.75, 0.75}, {-1.0, -1.0}
	}, 
	{
		{0.75, 0.75}, {1.0, 0.5}, {1.0, 0.0}, {0.0, 0.0}, {0.0, 1.5}, {1.0, 1.5}, {-1.0, -1.0}
	}, 
	{
		{0.0, 0.0}, {0.0, 1.5}, {-1.0, 0.0}, {0.0, 0.75}, {1.0, 0.75}, {-1.0, 0.0}, {1.0, 1.5}, {1.0, 0.0}
	}, 
	{
		{0.0, 0.0}, {1.0, 0.0}, {-1.0, 0.0}, {0.5, 0.0}, {0.5, 1.5}, {-1.0, 0.0}, {0.0, 1.5}, {1.0, 1.5}
	}, 
	{
		{0.0, 0.5}, {0.5, 0.0}, {1.0, 0.0}, {1.0, 1.5}, {-1.0, -1.0}
	}, 
	{
		{0.0, 0.0}, {0.0, 1.5}, {-1.0, 0.0}, {1.0, 1.5}, {0.0, 0.75}, {0.75, 0.0}, {-1.0, -1.0}
	}, 
	{
		{1.0, 0.0}, {0.0, 0.0}, {0.0, 1.5}, {-1.0, -1.0}
	}, 
	{
		{0.0, 0.0}, {0.0, 1.5}, {0.5, 1.0}, {1.0, 1.5}, {1.0, 0.0}, {-1.0, -1.0}
	}, 
	{
		{0.0, 0.0}, {0.0, 1.5}, {1.0, 0.0}, {1.0, 1.5}, {-1.0, -1.0}
	}, 
	{
		{0.0, 0.0}, {0.0, 1.5}, {1.0, 1.5}, {1.0, 0.0}, {0.0, 0.0}, {-1.0, -1.0}
	}, 
	{
		{0.0, 0.0}, {0.0, 1.5}, {1.0, 1.5}, {1.0, 0.75}, {0.0, 0.625}, {-1.0, -1.0}
	}, 
	{
		{0.0, 0.0}, {0.0, 1.5}, {1.0, 1.5}, {1.0, 0.5}, {0.0, 0.0}, {-1.0, 0.0}, {0.5, 0.5}, {1.0, 0.0}
	}, 
	{
		{0.0, 0.0}, {0.0, 1.5}, {1.0, 1.5}, {1.0, 0.75}, {0.0, 0.625}, {-1.0, 0.0}, {0.5, 0.625}, {1.0, 0.0}
	}, 
	{
		{0.0, 0.25}, {0.25, 0.0}, {1.0, 0.0}, {1.0, 0.625}, {0.0, 0.875}, {0.0, 1.5}, {0.75, 1.5}, {1.0, 1.25}
	}, 
	{
		{0.0, 1.5}, {1.0, 1.5}, {-1.0, 0.0}, {0.5, 1.5}, {0.5, 0.0}, {-1.0, -1.0}
	}, 
	{
		{0.0, 1.5}, {0.0, 0.25}, {0.5, 0.0}, {1.0, 0.25}, {1.0, 1.5}, {-1.0, -1.0}
	}, 
	{
		{0.0, 1.5}, {0.5, 0.0}, {1.0, 1.5}, {-1.0, -1.0}
	}, 
	{
		{0.0, 1.5}, {0.25, 0.0}, {0.5, 0.5}, {0.75, 0.0}, {1.0, 1.5}, {-1.0, -1.0}
	}, 
	{
		{0.0, 0.0}, {1.0, 1.5}, {-1.0, 0.0}, {0.0, 1.5}, {1.0, 0.0}, {-1.0, -1.0}
	}, 
	{
		{0.0, 1.5}, {0.5, 0.75}, {1.0, 1.5}, {-1.0, 0.0}, {0.5, 0.75}, {0.5, 0.0}, {-1.0, -1.0}
	}, 
	{
		{0.0, 1.5}, {1.0, 1.5}, {0.0, 0.0}, {1.0, 0.0}, {-1.0, 0.0}, {0.25, 0.75}, {0.75, 0.75}, {-1.0, -1.0}
	}
};

Menu::Menu(SDL_Window* pWnd)
	: Context<Menu>{pWnd}
	, m_iFontBuffer{0}
	, m_iTextBuffer{0}
	, m_iCharCount{0}
	, m_Speed{"Hello", 0, 0, 0.05, {1.0, 0, 0}}
{
	glGenVertexArrays(1, &m_iVertexArray);
	if (m_iVertexArray == 0)
		throw "glGenVertexArrays";
	glBindVertexArray(m_iVertexArray);
	glGenBuffers(1, &m_iFontBuffer);
	if (m_iFontBuffer == 0)
		throw "glGenBuffers";
	glBindBuffer(GL_SHADER_STORAGE_BUFFER, m_iFontBuffer);
	glBufferData(GL_SHADER_STORAGE_BUFFER, sizeof(Menu::m_arFont),
		Menu::m_arFont, GL_STATIC_COPY);
	glBindBuffer(GL_SHADER_STORAGE_BUFFER, 0);
	glGenBuffers(1, &m_iTextBuffer);
	if (m_iTextBuffer == 0)
		throw "glGenBuffers";
	UploadTexts();
}

Menu::~Menu()
{
	SDL_GL_MakeCurrent(m_pWnd, m_pContext);
	glBindVertexArray(0);
	glDeleteVertexArrays(1, &m_iVertexArray);
	glDeleteBuffers(1, &m_iFontBuffer);
	glDeleteBuffers(1, &m_iTextBuffer);
}

void Menu::UploadTexts()
{
	std::stringstream arData(std::ios::in | std::ios::out | std::ios::binary);
	UploadText(m_Speed, arData);
	arData.seekg(0, std::ios::beg);
	std::vector<unsigned char> vData(m_iCharCount * 6 * sizeof(GLfloat));
	arData.read((char*)vData.data(), vData.size());
	SDL_GL_MakeCurrent(m_pWnd, m_pContext);
	glBindBuffer(GL_ARRAY_BUFFER, m_iTextBuffer);
	glBufferData(GL_ARRAY_BUFFER, vData.size(),
		vData.data(), GL_STATIC_DRAW);
	glEnableVertexAttribArray(0);
	glEnableVertexAttribArray(1);
	glEnableVertexAttribArray(2);
	int stride = 6 * sizeof(GLfloat) + sizeof(GLint);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, stride, (void*)0);
	glVertexAttribIPointer(1, 1, GL_INT, stride, (void*)(3 * sizeof(GLfloat)));
	glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, stride, (void*)(3 * sizeof(GLfloat) + sizeof(GLint)));
	glBindBuffer(GL_ARRAY_BUFFER, 0);
}

void Menu::UploadText(TEXT & txt, std::stringstream & stream)
{
	for (int i = 0; i < txt.text.size(); ++i)
	{
		float fData = txt.fX + i * txt.fScalse;
		stream.write((char*)&fData, sizeof(GLfloat));
		stream.write((char*)&txt.fY, sizeof(GLfloat));
		stream.write((char*)&txt.fScalse, sizeof(GLfloat));
		int iData = txt.text[i] - 48;
		stream.write((char*)&iData, sizeof(GLint));
		stream.write((char*)txt.fColor, sizeof(GLfloat) * 3);
	}
	m_iCharCount += txt.text.size();
}

void Menu::Tick(int64_t iRealSpeed, int64_t iNominalSpeed)
{
	SDL_GL_MakeCurrent(m_pWnd, m_pContext);
	glDrawArrays(GL_POINTS, 0, m_iCharCount);
	glFinish();
}

const char* Menu::GetVertexStart()
{
	return _binary_src_shader_menu_vertex_glsl_start;
}

const char* Menu::GetVertexEnd()
{
	return _binary_src_shader_menu_vertex_glsl_end;
}

const char* Menu::GetGeometryStart()
{
	return _binary_src_shader_menu_geometry_glsl_start;
}

const char* Menu::GetGeometryEnd()
{
	return _binary_src_shader_menu_geometry_glsl_end;
}

const char* Menu::GetFragmentStart()
{
	return _binary_src_shader_menu_fragment_glsl_start;
}

const char* Menu::GetFragmentEnd()
{
	return _binary_src_shader_menu_fragment_glsl_end;
}
