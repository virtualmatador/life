cmake_minimum_required(VERSION 3.13)
set(base_part "${CMAKE_CURRENT_BINARY_DIR}")
add_library("resource" STATIC)
file(GLOB RESOURCES "*.glsl")
file(WRITE "${base_part}/resources.h" "// Resources\n")
file(APPEND "${base_part}/resources.h" "#ifndef GENERATED_RESOURCES_H\n")
file(APPEND "${base_part}/resources.h" "#define GENERATED_RESOURCES_H\n")
file(APPEND "${base_part}/resources.h" "\n")
file(WRITE "${base_part}/resources.cpp" "// Resources\n")
file(APPEND "${base_part}/resources.cpp" "#include \"resources.h\"\n")
file(APPEND "${base_part}/resources.cpp" "\n")
foreach(RESOURCE ${RESOURCES})
	file(READ "${RESOURCE}" hex_content HEX)
	file(SIZE "${RESOURCE}" hex_size)
	string(REGEX REPLACE "([A-Fa-f0-9][A-Fa-f0-9])" "0x\\1," output_hex "${hex_content}")
	get_filename_component(RESOURCE_NAME "${RESOURCE}" NAME)
	string(REPLACE "." "_" RESOURCE_NAME ${RESOURCE_NAME})
	string(REPLACE "-" "_" RESOURCE_NAME ${RESOURCE_NAME})
	file(APPEND "${base_part}/resources.h" "//${RESOURCE}\n")
	file(APPEND "${base_part}/resources.h" "extern const int ${RESOURCE_NAME}_size;\n")
	file(APPEND "${base_part}/resources.cpp" "//${RESOURCE}\n")
	file(APPEND "${base_part}/resources.cpp" "const int ${RESOURCE_NAME}_size = ${hex_size};\n")
	if (hex_size EQUAL 0)
		file(APPEND "${base_part}/resources.h" "extern const char* ${RESOURCE_NAME};\n")
		file(APPEND "${base_part}/resources.cpp" "const char* ${RESOURCE_NAME} = nullptr;\n")
	else()
		file(APPEND "${base_part}/resources.h" "extern const unsigned char ${RESOURCE_NAME}[${hex_size}];\n")
		file(APPEND "${base_part}/resources.cpp" "const char unsigned ${RESOURCE_NAME}[${hex_size}] = {${output_hex}};\n")
	endif()
	file(APPEND "${base_part}/resources.cpp" "\n")
endforeach()
file(APPEND "${base_part}/resources.h" "\n")
file(APPEND "${base_part}/resources.h" "#endif // GENERATED_RESOURCES_H\n")
target_sources("resource" PRIVATE "${base_part}/resources.cpp")
target_include_directories("resource" PUBLIC "${base_part}")
